
mp3 grade report for ackerma9
================================

Latest handin (graded copy) was - on_time

*Regular Problems:
Grading script score  => [46 / 49]
Late Penalty          => 0
Point adjustments     => -5
Total                 => 41

*Extra Credit:
Grading script score for extra credit => [0 / 5]
Late Penalty for extra credit         => 0
Point adjustments for extra credit    => 0
Total extra credit                    => 0


mp3grader program output
---------------------


[1 / 1] even_count [-2] (correct)
[1 / 1] even_count [-2;-1;0;2] (correct)
[1 / 1] even_count [-1;-3;-5] (correct)
[0 / 0] even_count [] (correct)
[1 / 1] split_sum [-2;0;-1;3] (fun x -> (x mod 2 = 1)) (correct)
[1 / 1] split_sum [4;2;1] (fun x -> false) (correct)
[1 / 1] split_sum [2;5;5;6] (fun x -> (x < 4)) (correct)
[0 / 0] split_sum [] (fun x -> (x = 1)) (correct)
[1 / 1] merge [1;3;5;6;7] [2;4] (correct)
[1 / 1] merge ['a';'b';'c'] ['a';'b';'c'] (correct)
[1 / 1] merge [] [0.1;0.4;0.8] (correct)
[0 / 0] merge [()] [()] (correct)
[1 / 1] range_count [1;2;3] 1 2 (correct)
[1 / 1] range_count ['m';'a';'b';'c';'h';'z'] 'd' 'g' (correct)
[1 / 1] range_count [1] -2 2 (correct)
[1 / 1] range_count [-2.5;-5.0] -4.0 -3.0 (correct)
[1 / 1] max_index [1;2;3;4] (correct)
[0 / 1] max_index [-1;-5;-3;-1;-4] (student solution returns an incorrect value)
[0 / 1] max_index ["asd";"zxc";"rty";"zxc";"zxc"] (student solution returns an incorrect value)
[1 / 1] max_index [-5.0] (correct)
[0 / 1] max_index [();();();()] (student solution returns an incorrect value)
[1 / 1] unique_to_neighbor [1;2;2;3;2] (correct)
[1 / 1] unique_to_neighbor ["asdf";"asd";"asdf";"asd";"asdf"] (correct)
[1 / 1] unique_to_neighbor [3;2;3;3;3] (correct)
[1 / 1] unique_to_neighbor [1;2;3;4;5;1] (correct)
[1 / 1] unique_to_neighbor [();();();()] (correct)
[1 / 1] split_sum_sol [1;2;3] (fun x -> (x mod 2 = 1)) (correct)
[1 / 1] split_sum_sol [4;2;1] (fun x -> true) (correct)
[1 / 1] split_sum_sol [2;5;5;6] (fun x -> (x<6)) (correct)
[1 / 1] split_sum_sol [-2;0;1;3] (fun x -> (x mod 3 = 1)) (correct)
[1 / 1] split_sum_sol [] (fun x -> (x = 1)) (correct)
[1 / 1] remove_if_sol [1;2;3] (fun x -> (x=3)) (correct)
[1 / 1] remove_if_sol [-5;-2;-3;-4] (fun x -> (x+3<0)) (correct)
[1 / 1] remove_if_sol [1;2;2;3] (fun x -> x=2) (correct)
[1 / 1] remove_if_sol [()] (fun x -> x=()) (correct)
[1 / 1] remove_if_sol [false;false;false] idk (correct)
[1 / 1] remove_if_sol [1;1;1;1] (fun x -> (x=1)) (correct)
[1 / 1] all_positive_sol [125;173;225;273] (correct)
[1 / 1] all_positive_sol [-1] (correct)
[1 / 1] all_positive_sol [] (correct)
[1 / 1] all_positive_sol [2;0;1;3] (correct)
[1 / 1] all_positive_sol [3;2;1;-4;3] (correct)
[1 / 1] range_count_sol [0;1;2;3] 1 3 (correct)
[1 / 1] range_count_sol [2;2;2;2] 1 3 (correct)
[1 / 1] range_count_sol [0.2;0.4;0.6;0.8] 0.3 0.5 (correct)
[1 / 1] range_count_sol [3;2;4;5;1;9] 1 9 (correct)
[1 / 1] range_count_sol ['a';'b';'c'] 'b' 'd' (correct)
[1 / 1] app_all_with [] 0 [] (correct)
[1 / 1] app_all_with [(fun x y -> x+y); (fun x y -> x*y )] 47 [1;2;3] (correct)
[1 / 1] app_all_with [(fun x y -> (x,y) ); (fun x y -> (x*.2.0, y))] 3.14 ["hello"; "there"; "hi"] (correct)
[1 / 1] app_all_with [(fun x y -> x > y); (fun x y -> y mod x = 0); (fun x y -> x < y)] 6 [0;6;10;12;20;24] (correct)
[1 / 1] app_all_with [(fun x y -> (x+y)>(x*y))] 6 [0;6;1;2;5;9] (correct)

[0 / 1] rle [1;2;2;3;3;3] (student solution timed out / exception thrown)
[0 / 1] rle [124] (student solution timed out / exception thrown)
[0 / 1] rle ["hi";"hi";"hi";"hi";"everyone"] (student solution timed out / exception thrown)
[0 / 1] rle [1;3;5;1] (student solution timed out / exception thrown)
[0 / 1] rle [4.0;0.0;0.0] (student solution timed out / exception thrown)
Total: [46 / 49]
Extra: [0 / 5]

Additional outout from compiling students code (may be empty)
----------------------------------------------------



Student's code (with comments and point adjustments)
----------------------------------------------------


open Mp3common
open List

(* Problem 1 *)
(*** Do not use == to check equality. Use = ***)
let rec even_count l = match l with []-> 0 | (x::xs) -> if(x mod 2 == 0) then 1+even_count xs else even_count xs;;
(*** If statement evaluated before recursive call ***) (*** -1 Point ***)

(* Problem 2 *)
let rec split_sum l f = match l with [] -> (0,0) | (x::xs) -> (let (a,b) = split_sum xs f in if(f x) then (a+x,b) else (a, b+x));;

(* Problem 3 *)
let rec merge l1 l2 = match l1 with [] -> l2 | (x::xs) -> match l2 with [] -> l1 | (y::ys) -> (x::y::merge xs ys);;

let inclusive a b c = if(c > a && c < b) then 1 else 0;;

(* Problem 4 *)
let rec range_count l m n =  match l with [] -> 0 | (x::xs) -> inclusive m n x + range_count xs m n;;
(*** Tail recursive call must be the last thing the function does ***) (*** -2 Points ***)

let max x y = if(x>y) then true else false;;

let rec max_index_aux l curr max index f = match l with []->index | x::xs ->if(f max x) then max_index_aux xs (curr+1) max index f else max_index_aux xs (curr+1) x curr f;;

(* Problem 5 *)
let rec max_index l = match l with [] -> [] | x::xs -> [(max_index_aux l 0 x 0 max)];;

let unique_to_neighbor_aux l x = match l with []->true | h::t -> if(x == h)then false else true;;


(* Problem 6 *)
let rec unique_to_neighbor l = match l with []->[] | x::xs -> if(unique_to_neighbor_aux xs x) then x::unique_to_neighbor xs else unique_to_neighbor xs;; 

(*** Tail recursive call must be the last thing the function does ***) (*** -2 Points ***)

(* Problem 7 *)
let remove_if_base = [] (* You may need to change this *)
let remove_if_rec p x r = if(p x) then r else x::r;;

(* Problem 8 *)
let split_sum_base = (0,0) (* You may need to change this *)
let split_sum_rec f x r = let (a,b) = r in (if(f x) then (x+a,b) else (a,b+x));;

(* Problem 9 *)
let all_positive_base = true(* You may need to change this *)
let all_positive_rec r x = if (x>0) then r else false;;

(* Problem 10 *)
let range_count_base = 0(* You may need to change this *)
let range_count_rec m n r x = if(x>m && x < n) then r+1 else r;;

(* Problem 11 *)
let app_all_with fs b l  = List.map(fun f->List.map(f b) l) fs;;

(* Problem 12 *)
let rle l = raise(Failure "Function not implemented yet.")

Stdout
----------------------------------------------------


